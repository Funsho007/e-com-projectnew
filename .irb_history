p = Product.new\
p.save # Should return false\
p.errors.full_messages # Should list validation errors
p = Product.new
p.save
p.errors.full_messages
exit
Product.count
Category.count
exit
Product.destroy_all
AdminUser.create!(email: 'admin@example.com', password: 'password', password_confirmation: 'password') if Rails.env.development?
exit
Film.all
\q
exit()
planets = Planet.all();
planets
people = Person.all();
people
exit()
sp = Species.all()
sp = Species.all();
sp
pp = Person.all();
pp
exit()
people = Person.all();
people
exit();
Film.delete_all();
f = Film.all();
f
s = Starship
s = Starship.all();
s
Starship.delete_all
s = Starship.all();
s
Vehicle.delete_all
f = Film.all();
f
Starship.all();
s = Starship.all();
s
exit();
person = Person.all();
person
s = Species.all();
s
person = Person.all();
person
exit()
\
AdminUser.create!(email: 'admin@example.com', password: 'password', password_confirmation: 'password') if Rails.env.development?\
 
Film.first.characters\
Film.first.people\
Character.first.film\
Character.first.person
AdminUser.create!(email: 'olaadmin@example.com', password: 'password', password_confirmation: 'password')
pr = Product
pr = Product.all();
pr
ct = Category.all();
ct
pr
pr = Product.all();
pr
\q
exit()
pr = Product.all();
pr
cls
prs = Product
prs = Product.all();
prs
exit
AdminUser.create!(email: 'admin@example.com', password: 'password', password_confirmation: 'password')
exit()
Province.all
exit()
Customer.columns.map(&:name)
exit()
Customer.create(\
  first_name: "John",\
  last_name: "Doe",\
  email: "john.doe@example.com",\
  password: "password",\
  password_confirmation: "password",\
  primary_address: "123 Main St",\
  primary_city: "Anytown",\
  primary_postal_code: "A1A 1A1",\
  alt_address: "456 Another St",\
  alt_city: "Othertown",\
  alt_postal_code: "B2B 2B2",\
  primary_province_id: 1,  # Replace with an actual province ID\
  alt_province_id: 2       # Replace with an actual province ID\
)
rails generate devise Customer\
exit
exit()
pr = Product
pr = Product.all();
pr
exit()
pr = Product.all();
pr
cat = Category.all();
cat
exit();
tag = Tag
tag = Tag.all();
tag
exit()
pr = Product.all();
pr
pr
eixt
exit()
tag = Ta
exit()
User.create(email: 'superuser@example.com', password: 'password', password_confirmation: 'password', admin: true)
exit()
exit()
User.create(email: 'admin@admin.com', password: 'password', password_confirmation: 'password', admin: true)
exit()
User.create(email: 'superuser@example.com', password: 'password', password_confirmation: 'password', admin: true)
User.find_by(email: 'superuser@example.com')
exit
AdminUser.delete_all
AdminUser.count
AdminUser.create(email: 'Admin@admin.com', password: 'Password', password_confirmation: 'Password')
AdminUser.create(email: 'Admin@admin.com', password: 'Password', password_confirmation: 'Password')
AdminUser.find_by(email: 'Admin@admin.com')
admin_user = AdminUser.new(email: 'Admin@admin.com', password: 'Password', password_confirmation: 'Password')
if admin_user.save\
  puts "Admin user created successfully."\
else\
  puts "Failed to create admin user: #{admin_user.errors.full_messages.join(", ")}"\
end
AdminUser.find_by(email: 'Admin@admin.com')
AdminUser.create(email: 'newadmin@example.com', password: 'Password', password_confirmation: 'Password')
AdminUser.find_by(email: 'newadmin@example.com')
exit
rails db:reset
exit
Product.delete_all
Order.delete_all
Category.delete_all\
# Add other models as needed
Category.delete_all
Order.delete_all
Category.delete_all
Product.delete_all
Product.count
Order.count\
Category.count
ActiveRecord::Base.connection.tables
Product.delete_all
Order.delete_all
OrderItem.delete_all\
User.delete_allProduct.count
Product.count
rails db:reset
exit
ProductCategory.delete_all
ProductCategory.delete_all
ActiveRecord::Base.connection.foreign_keys(:product_categories)
Product.where(product_category_id: your_category_ids).destroy_all
Product.where(product_category_id: id).destroy_all
category = ProductCategory.find_by(id: your_category_id)\
category.destroy if category
Product.delete_all
Product.count
Categories.delete_all
ProductCategory.delete_all
ProductCategory.count
exit
.tables
tables
exit()
ActiveRecord::Base.connection.drop_table(:products_tags)
exit
ActiveRecord::Base.connection.drop_table(:pages)
exit
ActiveRecord::Base.connection.drop_table(:active_storage_blobs)\
ActiveRecord::Base.connection.drop_table(:active_storage_attachments)
exit
ActiveRecord::Base.connection.drop_table(:active_storage_variant_records)
exit
ActiveRecord::Base.connection.drop_table(:admin_users)
exit
ActiveRecord::Base.connection.drop_table(:active_admin_comments)
exit
